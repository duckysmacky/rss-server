// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, create_time, update_time, username, api_key) 
VALUES ($1, $2, $3, $4, encode(sha256(random()::text::bytea), 'hex'))
RETURNING id, create_time, update_time, username, api_key
`

type CreateUserParams struct {
	ID         uuid.UUID
	CreateTime time.Time
	UpdateTime time.Time
	Username   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreateTime,
		arg.UpdateTime,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Username,
		&i.ApiKey,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, create_time, update_time, username, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUser(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.UpdateTime,
		&i.Username,
		&i.ApiKey,
	)
	return i, err
}
